plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.1.7'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = "org.sunpowder.backvault"
version = "1.0.0"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    def paperApi = { version ->
        create("io.papermc.paper:paper-api:$version") {
            exclude group: 'com.google.code.gson', module: 'gson'
        }
    }
    
    compileOnly paperApi("1.21.1-R0.1-SNAPSHOT")
    compileOnly paperApi("1.20.4-R0.1-SNAPSHOT") 
    compileOnly paperApi("1.19.4-R0.1-SNAPSHOT")
    
    shade 'io.papermc:paperlib:1.0.8'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.3'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

shadowJar {
    archiveClassifier = ''
    relocate 'io.papermc.lib', 'org.sunpowder.backvault.lib.paperlib'
    minimize {
        exclude(dependency('io.papermc:paperlib:.*'))
    }
}

jar {
    enabled = false
}

test {
    useJUnitPlatform()
    systemProperty 'paper.version', detectPaperVersion()
}

def detectPaperVersion() {
    def version = System.getProperty('paper.version', '1.21.1')
    logger.lifecycle("Building for Paper version: $version")
    return version
}

processResources {
    filesMatching('**/plugin.yml') {
        expand (
            NAME: 'BackVault',
            VERSION: version,
            API_VERSION: '1.19'
        )
    }
}

checkstyle {
    toolVersion = '10.12.4'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

spotbugs {
    toolVersion = '4.8.3'
    ignoreFailures = false
    excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html.required = true
        xml.required = false
    }
}
